#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Utility functions for managing the right person cluster
"""
from __future__ import unicode_literals

import argparse
import os
import shutil
import tempfile

import subprocess

import ujson

from right_person.data_mining.cluster.utils import CLUSTER_DIR, TERRAFORM_VARS, TERRAFORM_DIRECTORY, \
    get_terraform_vars, run_system_shell_process


BUILD_AMI_FUNCTION = """
packer build
-var 'region={region}'
-var 'subnet_id={subnet}'
-var 'playbook_file={playbook_file}'
-var 'ami_name=RIGHT_PERSON_SPARK_NODE'
{packer_file}"""


_TERRAFORM_INIT_FUNCTION = """yes no || true |
terraform init
-backend-config 'bucket={cluster_state_bucket}'
-backend-config 'region={cluster_region}'
-backend-config 'key={cluster_region}/right_person/{cluster_id}/tf.state'
-no-color
-upgrade
-from-module={input_location}
-var-file={vars_file}
{terraform_state_location}
"""


TERRAFORM_VALIDATE = """
terraform validate
-no-color
{terraform_dir}
-var-file={vars_file}
"""  # todo: fix validation


def build_ami():
    """Build a machine image for a right_person spark node"""
    terraform_vars = get_terraform_vars()
    region, subnet_id = terraform_vars['cluster_region'], terraform_vars['subnet_id']
    playbook_file = os.path.join(CLUSTER_DIR, 'ansible', 'playbooks', 'right_person_node.yml')
    packer_file = os.path.join(CLUSTER_DIR, 'packer', 'ami_builder.json')
    command = str(BUILD_AMI_FUNCTION.format(
        region=region, subnet=subnet_id, playbook_file=playbook_file, packer_file=packer_file
    ).replace('\n', ' ').strip())
    return run_system_shell_process(command, stdout=None, stderr=None)


def terraform_validate():
    """validate the terraform running """


def edit_cluster_settings():
    """
    edit the terraform variables file
    """
    terraform_state_location = tempfile.mkdtemp()
    terraform_vars_temp_file = tempfile.NamedTemporaryFile()

    with open(TERRAFORM_VARS) as initial:
        terraform_vars_temp_file.writelines(initial.readlines())
        terraform_vars_temp_file.seek(0)

    retry = True
    while retry:

        try:
            try:
                subprocess.call(['nano', terraform_vars_temp_file.name])
                print('validating...')
                terraform_vars = ujson.load(open(terraform_vars_temp_file.name))
                state_s3_path, region = terraform_vars['cluster_state_bucket'], terraform_vars['cluster_region']

                command = str(_TERRAFORM_INIT_FUNCTION.format(
                    cluster_state_bucket=state_s3_path, cluster_region=region, cluster_id='right_person_cluster_test',
                    input_location=TERRAFORM_DIRECTORY, terraform_state_location=terraform_state_location,
                    vars_file=terraform_vars_temp_file.name
                ).replace('\n', ' ').strip())

                run_system_shell_process(command, stdout=None)

                # TODO: fix bad validation

            except OSError:
                print('Cannot Load file for editing: no editor found: {}'.format(TERRAFORM_VARS))
                raise
            except (ValueError, TypeError):
                print('The file is not valid json!')
                raise
            except RuntimeError as e:
                print('The terraform is not valid!\n{}'.format(e.message))
                raise
            else:
                with open(TERRAFORM_VARS, 'w') as initial:
                    initial.writelines(terraform_vars_temp_file.readlines())
            retry = False

        except (Exception, ):
            retry_input = raw_input("Would you like to retry? ")
            options = {'yes': True, 'no': False}
            while retry_input not in options:
                retry_input = raw_input("please type yes or no: ")
            retry = options[retry_input]
        finally:
            if not retry:
                terraform_vars_temp_file.close()
                shutil.rmtree(terraform_state_location)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="""Manages the right_person cluster""")
    parser.add_argument('-e', '--edit-vars', action='store_true', default=False)
    parser.add_argument('-a', '--build-ami', action='store_true', default=False)
    args = parser.parse_args()
    if args.edit_vars:
        edit_cluster_settings()
    if args.build_ami:
        build_ami()
